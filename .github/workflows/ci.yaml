name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "master", "feature/devops" ]
  workflow_dispatch: {}

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  BACKEND_IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/sausage-backend
  FRONTEND_IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/sausage-frontend

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      db:
        image: oscarfonts/h2:alpine
        ports:
          - "9092:9092"
          - "8082:8082"
        env:
          H2_OPTIONS: -tcp -tcpAllowOthers -tcpPort 9092 -web -webAllowOthers -webPort 8082 -ifNotExists
        options: >-
          --health-cmd "curl -f http://localhost:8082/login.jsp || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '16'
          distribution: 'temurin'

      - name: Run backend tests
        working-directory: ./backend
        run: mvn test

      - name: Build backend JAR
        working-directory: ./backend
        run: mvn package -DskipTests

      - name: Run backend in background
        working-directory: ./backend
        run: |
          nohup java -jar target/*.jar > ../backend.log 2>&1 &

      - name: Wait for backend to become ready
        run: |
          for i in {1..20}; do
            echo "Backend not ready (attempt $i)..."
            if curl -sSf http://localhost:8080/actuator/health > /dev/null; then
              echo " Backend is ready!"
              exit 0
            fi
            sleep 3
          done
          echo "Backend failed to start in time. Dumping logs:"
          cat backend.log || echo "No logs found"
          exit 1

      - name: Проверка доступности backend API
        run: |
          echo "Проверка http://localhost:8080/api/products"
          curl -i http://localhost:8080/api/products || exit 1


      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install specific Google Chrome version 114
        run: |
          sudo rm -f /usr/bin/google-chrome || true
          wget https://storage.googleapis.com/chrome-for-testing-public/114.0.5735.90/linux64/chrome-linux64.zip
          unzip chrome-linux64.zip
          sudo mv chrome-linux64 /opt/chrome114
          sudo ln -fs /opt/chrome114/chrome /usr/bin/google-chrome
          google-chrome --version

      - name: Install frontend dependencies
        working-directory: ./frontend
        env:
          NODE_OPTIONS: --openssl-legacy-provider
        run: npm ci

      - name: Install specific ChromeDriver version 114.0.5735.90
        run: |
          wget https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          chmod +x chromedriver
          sudo mv chromedriver /usr/local/bin/chromedriver
          chromedriver --version

      - name: Update webdriver dependencies
        working-directory: ./frontend
        run: |
          npx chromedriver --version || true
          rm -rf node_modules/protractor/node_modules/webdriver-manager/selenium
          npm uninstall webdriver-manager
          npm install webdriver-manager@latest
          npx webdriver-manager clean

      - name: Run e2e tests
        working-directory: ./frontend
        env:
          NODE_OPTIONS: --openssl-legacy-provider
        run: npm run e2e

  build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE_NAME }}:latest
            ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}

      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
