name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "feature/devops" ]
  workflow_dispatch: {}

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  BACKEND_IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/sausage-backend
  FRONTEND_IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/sausage-frontend

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      backend-jar: ${{ steps.build-backend.outputs.jar-path }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '16'
          distribution: 'temurin'

      - name: Build backend JAR
        id: build-backend
        working-directory: ./backend
        run: |
          mvn package -DskipTests
          echo "jar-path=target/$(ls target/*.jar)" >> $GITHUB_OUTPUT

      - name: Upload backend JAR
        uses: actions/upload-artifact@v3
        with:
          name: backend-jar
          path: ./backend/target/*.jar

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Build frontend
        working-directory: ./frontend
        run: npm ci && npm run build

      - name: Upload frontend dist
        uses: actions/upload-artifact@v3
        with:
          name: frontend-dist
          path: ./frontend/dist

  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      db:
        image: oscarfonts/h2:alpine
        ports: ["9092:9092", "8082:8082"]
        env:
          H2_OPTIONS: -tcp -tcpAllowOthers -tcpPort 9092 -web -webAllowOthers -webPort 8082 -ifNotExists
        options: >-
          --health-cmd "curl -f http://localhost:8082/login.jsp || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download backend JAR
        uses: actions/download-artifact@v3
        with:
          name: backend-jar

      - name: Start backend
        run: |
          nohup java -jar *.jar > backend.log 2>&1 &
          echo $! > backend.pid

      - name: Wait for backend
        run: |
          for i in {1..20}; do
            if curl -sSf http://localhost:8080/api/products > /dev/null; then
              echo "Backend is ready!"
              exit 0
            fi
            sleep 3
          done
          cat backend.log || echo "No logs found"
          exit 1

      - name: Download frontend dist
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist

      - name: Serve built frontend
        run: |
          npm install -g serve
          serve -s ./frontend-dist &
          sleep 3

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run e2e

      - name: Stop backend
        if: always()
        run: kill $(cat backend.pid) || true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Download backend JAR
        uses: actions/download-artifact@v3
        with:
          name: backend-jar

      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          build-args: JAR_FILE=target/$(basename $(ls *.jar))
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE_NAME }}:latest
            ${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}

      - name: Download frontend dist
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist

      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE_NAME }}:latest
            ${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
